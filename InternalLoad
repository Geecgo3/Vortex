-- Load ESP library
local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/linemaster2/esp-library/main/library.lua"))();
loadstring(game:HttpGet("https://raw.githubusercontent.com/Geecgo3/Vortex/refs/heads/main/SkeletonLIB"))();
-- Settings ESP
local ESP_SETTINGS = {
    Teamcheck = false,
}
-- Master switch
ESP.Enabled = true;

-- Enable boxes
ESP.ShowBox = false;

-- Set the box type to corner
ESP.BoxType = "Corner Box Esp";

-- Enable names
ESP.ShowName = false;

-- Enable Healthbar
ESP.ShowHealth = false;

-- Enable tracers
ESP.ShowTracer = false;

-- Enable Distance
ESP.ShowDistance = false;

-- Enable Skeleton
SkeleESP = false;



-- 3D Box ESP setup
local MainVariables = {
    ESP = false,           -- Toggle for ESP
    ThreeDBoxESP = false,  -- Toggle for 3D Box ESP
    BOX_COLOR = Color3.fromRGB(255, 255, 0),  -- Yellow
    LINE_THICKNESS = 1     -- Thickness of box lines
}

-- Tabs
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()
local window = library:AddWindow("Sheet.cc INTERNAL", {
    main_color = Color3.fromRGB(41, 74, 122), -- Color
    min_size = Vector2.new(750, 646), -- Size of the gui
    can_resize = true, -- true or false
})

-- Visual Tab
local visualsTab = window:AddTab("Visual")
visualsTab:Show() -- shows the tab

-- Aimbot tab
local aimbotTab = window:AddTab("Aimbot")
aimbotTab:Show()

-- Misc Tab
local miscTab = window:AddTab("Misc")
miscTab:Show()


-- Function to set the player's walkspeed
local function setwalkspeed(speed)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChild("Humanoid")
    
    if humanoid then
        humanoid.WalkSpeed = speed
    end
end

-- Misc Slider Walkspeed
local slider = miscTab:AddSlider("WalkSpeed", function(p)
	setwalkspeed(p)  -- Update walk speed when slider value changes
end, {
    ["min"] = 16,    -- Minimum walk speed
    ["max"] = 100,   -- Maximum walk speed
})
slider:Set(16) -- Needed


-- 3D Box ESP Toggle
local switch3D = visualsTab:AddSwitch("3D BOX ESP", function(bool)
    MainVariables.ThreeDBoxESP = bool
end)
switch3D:Set(false) -- Default state is disabled

-- Box ESP Toggle
local switchBox = visualsTab:AddSwitch("Enable Box ESP", function(bool)
    ESP.ShowBox = bool
end)
switchBox:Set(false) -- Default state is enabled

-- Health ESP Toggle
local switchBox = visualsTab:AddSwitch("Enable Health ESP", function(bool)
    ESP.ShowHealth = bool
end)
switchBox:Set(false) -- Default state is enabled

-- Show name ESP toggle
local switchBox = visualsTab:AddSwitch("Enable Name ESP", function(bool)
    ESP.ShowName = bool
end)
switchBox:Set(false) -- Default state is enabled


-- Show Distance esp
local switchBox = visualsTab:AddSwitch("Enable Distance ESP", function(bool)
    ESP.ShowDistance = bool
end)
switchBox:Set(false) -- Default state is enabled

-- Show tracer ESP
local switchBox = visualsTab:AddSwitch("Enable Tracer ESP", function(bool)
    ESP.ShowTracer = bool
end)
switchBox:Set(false) -- Default state is enabled

local switchBox = visualsTab:AddSwitch("Enable Skeleton ESP", function(bool)
      if bool then
      SkeleESP = bool
    else
        lines:remove();
        SkeleESP = false
    end
end)
switchBox:Set(false) -- Default state is enabled



-- TEAM CHECK TOGGLE

-- Show Teamcheck
local switchBox = visualsTab:AddSwitch("Enable Team CHECK", function(bool)
    ESP.Teamcheck = bool
end)
switchBox:Set(false) -- Default state is enabled



-- Function to create 3D box ESP
local function create3DBox(character)
    local boxLines = {}
    for i = 1, 12 do
        local line = Drawing.new("Line")
        line.Thickness = MainVariables.LINE_THICKNESS
        line.Color = MainVariables.BOX_COLOR
        line.Visible = false
        table.insert(boxLines, line)
    end
    return boxLines
end

-- Function to update 3D box ESP
local function update3DBox(character, boxLines)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    -- Define box corners relative to HumanoidRootPart
    local size = Vector3.new(4, 6, 4) -- Customize box size as needed
    local corners = {
        rootPart.CFrame * CFrame.new(-size.X / 2, size.Y / 2, -size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(size.X / 2, size.Y / 2, -size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(-size.X / 2, size.Y / 2, size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(size.X / 2, size.Y / 2, size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(-size.X / 2, -size.Y / 2, -size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(size.X / 2, -size.Y / 2, -size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(-size.X / 2, -size.Y / 2, size.Z / 2).Position,
        rootPart.CFrame * CFrame.new(size.X / 2, -size.Y / 2, size.Z / 2).Position
    }

    -- Define edges between corners
    local edges = {
        {1, 2}, {2, 4}, {4, 3}, {3, 1},
        {5, 6}, {6, 8}, {8, 7}, {7, 5},
        {1, 5}, {2, 6}, {3, 7}, {4, 8}
    }

    -- Update lines
    for i, edge in ipairs(edges) do
        local corner1, visible1 = workspace.CurrentCamera:WorldToViewportPoint(corners[edge[1]])
        local corner2, visible2 = workspace.CurrentCamera:WorldToViewportPoint(corners[edge[2]])

        if visible1 and visible2 then
            boxLines[i].From = Vector2.new(corner1.X, corner1.Y)
            boxLines[i].To = Vector2.new(corner2.X, corner2.Y)
            boxLines[i].Visible = true
        else
            boxLines[i].Visible = false
        end
    end
end

-- Function to remove 3D Box ESP
local function remove3DBox(boxLines)
    for _, line in ipairs(boxLines) do
        line:Remove()
    end
end

-- Main logic to handle the 3D Box ESP based on the toggle
local espCache = {}

game:GetService("Players").PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        -- Skip adding ESP for the local player
        if player == game:GetService("Players").LocalPlayer then return end
        
        if MainVariables.ThreeDBoxESP and character:FindFirstChild("HumanoidRootPart") then
            local boxLines = create3DBox(character)
            espCache[player] = boxLines
        end
    end)
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    if espCache[player] then
        remove3DBox(espCache[player])
        espCache[player] = nil
    end
end)



game:GetService("RunService").RenderStepped:Connect(function()
    if MainVariables.ThreeDBoxESP then
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            -- Skip adding ESP for the local player
            if player == game:GetService("Players").LocalPlayer then
                continue
            end

            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local boxLines = espCache[player]
                if not boxLines then
                    espCache[player] = create3DBox(player.Character)
                else
                    update3DBox(player.Character, boxLines)
                end
            end
        end
    else
        -- Remove all 3D ESP boxes if the toggle is off
        for _, boxLines in pairs(espCache) do
            remove3DBox(boxLines)
        end
        espCache = {} -- Clear the cache
    end

    -- Enable or disable the standard ESP box
    ESP.ShowBox = switchBox:Get() -- Update ShowBox based on the toggle
end)

-- Your ESP code should remain separate and be executed on a loop or update
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local LocalPlayer = Players.LocalPlayer
local espCache = {}

-- Define body parts connection for R15 and R6 models
local bodyConnections = {
    R15 = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"LowerTorso", "LeftUpperLeg"},
        {"LowerTorso", "RightUpperLeg"},
        {"LeftUpperLeg", "LeftLowerLeg"},
        {"LeftLowerLeg", "LeftFoot"},
        {"RightUpperLeg", "RightLowerLeg"},
        {"RightLowerLeg", "RightFoot"},
        {"UpperTorso", "LeftUpperArm"},
        {"UpperTorso", "RightUpperArm"},
        {"LeftUpperArm", "LeftLowerArm"},
        {"LeftLowerArm", "LeftHand"},
        {"RightUpperArm", "RightLowerArm"},
        {"RightLowerArm", "RightHand"}
    },
    R6 = {
        {"Head", "Torso"},
        {"Torso", "Left Arm"},
        {"Torso", "Right Arm"},
        {"Torso", "Left Leg"},
        {"Torso", "Right Leg"}
    }
}

-- Function to create a new drawing line
local function createLine()
    return Drawing.new("Line")
end

-- Function to update ESP lines for a player
local function updateESP(player)
    if player == LocalPlayer or not SkeleESP then return end  -- Skip if ESP is disabled

    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        if espCache[player] then
            for _, line in pairs(espCache[player]) do
                line.Visible = false
            end
        end
        return
    end

    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end

    local rigType = humanoid.RigType.Name
    local connections = bodyConnections[rigType]

    if not connections then return end

    if not espCache[player] then
        espCache[player] = {}
        for _, connection in pairs(connections) do
            local line = createLine()
            line.Color = Color3.fromRGB(255, 255, 255)
            line.Thickness = 1
            espCache[player][connection[1] .. "-" .. connection[2]] = line
        end
    end

    for _, connection in pairs(connections) do
        local partA = character:FindFirstChild(connection[1])
        local partB = character:FindFirstChild(connection[2])
        local line = espCache[player][connection[1] .. "-" .. connection[2]]

        if partA and partB and line then
            local screenPosA, onScreenA = Camera:WorldToViewportPoint(partA.Position)
            local screenPosB, onScreenB = Camera:WorldToViewportPoint(partB.Position)

            if onScreenA and onScreenB then
                line.From = Vector2.new(screenPosA.X, screenPosA.Y)
                line.To = Vector2.new(screenPosB.X, screenPosB.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        elseif line then
            line.Visible = false
        end
    end
end

-- Function to clear all ESP lines for all players
local function ClearALLesp()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if espCache[player] then
            for _, line in pairs(espCache[player]) do
                if line then
                    line:Destroy()  -- Destroy each drawing line
                end
            end
            espCache[player] = nil  -- Clear the ESP cache for that player
        end
    end
end



-- Function to enable Skeleton ESP (you can customize how the ESP is drawn)
local function EnableSkeletonESP()
    for _, player in ipairs(game.Players:GetPlayers()) do
        -- Here you would add code to draw skeleton ESP lines for each player
        -- Example:
        local playerEspLines = {}  -- Temporary storage for player's ESP lines
        -- Add your drawing code here, and store the lines in playerEspLines
        -- Example: table.insert(playerEspLines, line)
        
        -- Store the lines in the cache
        espCache[player] = playerEspLines
    end
end

local function DisableSkeletonESP()
    ClearALLesp()  -- Clear all ESP lines for all players
end


-- Update ESP for all players
RunService.RenderStepped:Connect(function()
    for _, player in ipairs(Players:GetPlayers()) do
        updateESP(player)
    end
end)

-- Clear ESP when a player leaves
Players.PlayerRemoving:Connect(function(player)
    if espCache[player] then
        for _, line in pairs(espCache[player]) do
            line:Remove()
        end
        espCache[player] = nil
    end
end)


